DEFINE QLOCAL(IBM.DEMO.Q.MONITOR.QUEUE) BOQNAME(IBM.DEMO.Q.BOQ) BOTHRESH(3) REPLACE
DEFINE QLOCAL(IBM.DEMO.Q) BOQNAME(IBM.DEMO.Q.BOQ) BOTHRESH(3) REPLACE
DEFINE QLOCAL(IBM.DEMO.Q.BOQ) REPLACE
* Use a different dead letter queue, for undeliverable messages
DEFINE QLOCAL('DEV.DEAD.LETTER.QUEUE') REPLACE
ALTER QMGR DEADQ('DEV.DEAD.LETTER.QUEUE')
DEFINE CHANNEL('IBM.APP.SVRCONN') CHLTYPE(SVRCONN)
ALTER QMGR CHLAUTH (DISABLED)
DEFINE CHANNEL('MONITORING_CHL') CHLTYPE(SVRCONN)
SET CHLAUTH(MONITORING_CHL) TYPE(BLOCKUSER) USERLIST(NOBODY)
REFRESH SECURITY TYPE(CONNAUTH)

*******************************************************************************
* Script generated on 2022-03-18   at 11.04.15
* Script generated by user 'metaylor' on host 'klein'
* Queue manager name: QM1
* Queue manager platform: UNIX
* Queue manager command level: (925/925) XRCAP(YES) AMQPCAP(YES)
* Command issued: dmpmqcfg -m QM1
*******************************************************************************
ALTER QMGR +
*  ADVCAP(ENABLED) +
*  ALTDATE(2022-02-25) +
*  ALTTIME(08.31.00) +
*  AMQPCAP(YES) +
   CCSID(819) +
**   CERTLABL('ibmwebspheremqqm1') +
   CHLEV(ENABLED) +
   CLWLUSEQ(LOCAL) +
   CMDEV(NODISPLAY) +
*  COMMANDQ(SYSTEM.ADMIN.COMMAND.QUEUE) +
   CONFIGEV(ENABLED) +
   CONNAUTH('PAM') +
*  CRDATE(2022-02-22) +
*  CRTIME(12.14.26) +
   DEADQ('SYSTEM.DEAD.LETTER.QUEUE') +
   DEFXMITQ('SYSTEM.MQTT.TRANSMIT.QUEUE') +
   DESCR('ASDFASDF') +
   LOCALEV(ENABLED) +
   MAXHANDS(60000) +
   MONCHL(HIGH) +
   MONQ(HIGH) +
   PERFMEV(ENABLED) +
*  QMID(QM1_2022-02-22_12.14.26) +
*  SPLCAP(ENABLED) +
   SSLCRYP(' ') +
**   SSLKEYR('/var/mqm/ssl/key') +
   STATINT(180) +
   SUITEB(NONE) +
*  VERSION(09020500) +
*  XRCAP(YES) +
   FORCE
DEFINE QLOCAL('APP.0') +
*  ALTDATE(2022-03-08) +
*  ALTTIME(12.56.39) +
*  CRDATE(2022-03-08) +
*  CRTIME(12.56.38) +
*  CURDEPTH(118) +
   DISTL(NO) +
   MAXDEPTH(200) +
   MONQ(HIGH) +
   QDPHIEV(ENABLED) +
   REPLACE
DEFINE QALIAS('APP.0.A') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.20.16) +
   DEFPSIST(YES) +
   REPLACE
DEFINE QLOCAL('APP.1') +
*  ALTDATE(2022-03-08) +
*  ALTTIME(12.56.40) +
*  CRDATE(2022-03-08) +
*  CRTIME(12.56.39) +
*  CURDEPTH(56) +
   DISTL(NO) +
   MAXDEPTH(400) +
   MONQ(HIGH) +
   QDPHIEV(ENABLED) +
   REPLACE
DEFINE QALIAS('APP.1.A') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.20.17) +
   DEFPSIST(YES) +
   REPLACE
DEFINE QLOCAL('APP.2') +
*  ALTDATE(2022-03-08) +
*  ALTTIME(12.56.41) +
*  CRDATE(2022-03-08) +
*  CRTIME(12.56.40) +
*  CURDEPTH(204) +
   DISTL(NO) +
   MAXDEPTH(600) +
   MONQ(HIGH) +
   QDPHIEV(ENABLED) +
   REPLACE
DEFINE QALIAS('APP.2.A') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.20.17) +
   DEFPSIST(YES) +
   REPLACE
DEFINE QLOCAL('APP.3') +
*  ALTDATE(2022-03-08) +
*  ALTTIME(12.56.42) +
*  CRDATE(2022-03-08) +
*  CRTIME(12.56.41) +
   DISTL(NO) +
   MAXDEPTH(800) +
   MONQ(HIGH) +
   QDPHIEV(ENABLED) +
   REPLACE
DEFINE QALIAS('APP.3.A') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.20.17) +
   DEFPSIST(YES) +
   REPLACE
DEFINE QLOCAL('APP.4') +
*  ALTDATE(2022-03-08) +
*  ALTTIME(12.56.43) +
*  CRDATE(2022-03-08) +
*  CRTIME(12.56.42) +
*  CURDEPTH(41) +
   DISTL(NO) +
   MAXDEPTH(1000) +
   MONQ(HIGH) +
   QDPHIEV(ENABLED) +
   REPLACE
DEFINE QALIAS('APP.4.A') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.20.17) +
   DEFPSIST(YES) +
   REPLACE




DEFINE QLOCAL('DEV.QUEUE.1') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.20) +
*  CRDATE(2022-02-22) +
*  CRTIME(12.19.20) +
*  CURDEPTH(1) +
   DISTL(NO) +
   MAXDEPTH(5000) +
   MONQ(HIGH) +
   TRIGGER +
   PROPCTL(FORCE) +
   TRIGDATA('Data set at 2019-08-02T08:19:56+01:00') +
   REPLACE
DEFINE QLOCAL('DEV.QUEUE.2') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.21) +
*  CRDATE(2022-02-22) +
*  CRTIME(12.19.21) +
   DISTL(NO) +
   MAXDEPTH(5000) +
   MONQ(HIGH) +
   REPLACE
DEFINE QLOCAL('DEV.QUEUE.3') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.21) +
*  CRDATE(2022-02-22) +
*  CRTIME(12.19.21) +
   DISTL(NO) +
   MAXDEPTH(5000) +
   MONQ(HIGH) +
   REPLACE


DEFINE QALIAS('LOOP.ALIAS') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.24) +
   TARGET('LOOP.INPUT') +
   REPLACE
DEFINE QREMOTE('LOOP.INPUT') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.24) +
   RQMNAME('QM2') +
   RNAME('LOOP.RETURN') +
   XMITQ(' ') +
   REPLACE
DEFINE QLOCAL('LOOP.OUTPUT') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.25) +
*  CRDATE(2022-02-22) +
*  CRTIME(12.19.25) +
   DISTL(NO) +
   MAXDEPTH(5000) +
   MONQ(HIGH) +
*  OPPROCS(1) +
   QDPHIEV(ENABLED) +
   REPLACE

DEFINE QLOCAL('QM2') +
*  ALTDATE(2022-02-23) +
*  ALTTIME(12.57.53) +
*  CRDATE(2022-02-22) +
*  CRTIME(12.19.26) +
   INITQ('SYSTEM.CHANNEL.INITQ') +
*  IPPROCS(1) +
   MAXDEPTH(5000) +
   MONQ(HIGH) +
   TRIGGER +
*  OPPROCS(1) +
   QDPHIEV(ENABLED) +
   USAGE(XMITQ) +
   REPLACE
DEFINE QLOCAL('QM2.RETRY') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.26) +
*  CRDATE(2022-02-22) +
*  CRTIME(12.19.26) +
   DISTL(NO) +
   GET(DISABLED) +
   MAXDEPTH(5000) +
   USAGE(XMITQ) +
   REPLACE
DEFINE QLOCAL('QM2.STOPPED') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.27) +
*  CRDATE(2022-02-22) +
*  CRTIME(12.19.27) +
   DISTL(NO) +
   GET(DISABLED) +
   MAXDEPTH(5000) +
   USAGE(XMITQ) +
   REPLACE




DEFINE CHANNEL('QM1') +
   CHLTYPE(SVRCONN) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.46) +
   DESCR('Default SVRCONN') +
   SHARECNV(1) +
   TRPTYPE(TCP) +
   REPLACE



DEFINE CHANNEL('TO.INACTIVE.RCVR') +
   CHLTYPE(RCVR) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.49) +
   TRPTYPE(TCP) +
   REPLACE
DEFINE CHANNEL('TO.INACTIVE.RQSTR') +
   CHLTYPE(RQSTR) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.50) +
   CONNAME('qm1-ibm-mq.dev.svc.cluster.local') +
   TRPTYPE(TCP) +
   REPLACE
DEFINE CHANNEL('TO.INACTIVE.SDR') +
   CHLTYPE(SDR) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.50) +
   CONNAME('qm1-ibm-mq.dev.svc.cluster.local') +
   DESCR('An inactive sender') +
   TRPTYPE(TCP) +
   XMITQ('X') +
   REPLACE
DEFINE CHANNEL('TO.INACTIVE.SVR') +
   CHLTYPE(SVR) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.51) +
   TRPTYPE(TCP) +
   XMITQ('X') +
   REPLACE
DEFINE CHANNEL('TO.QM1') +
   CHLTYPE(RCVR) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.51) +
   DESCR('DESC-TO-QM1') +
   TRPTYPE(TCP) +
   REPLACE
DEFINE CHANNEL('TO.QM1.SVRCONN') +
   CHLTYPE(SVRCONN) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.52) +
   MAXINST(20) +
   MAXINSTC(10) +
   SHARECNV(1) +
   TRPTYPE(TCP) +
   REPLACE
DEFINE CHANNEL('TO.QM2') +
   CHLTYPE(SDR) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.52) +
   CONNAME('qm2-ibm-mq.dev.svc.cluster.local(1414)') +
   DESCR('DESC-TO-QM2') +
   TRPTYPE(TCP) +
   XMITQ('QM2') +
   REPLACE
DEFINE CHANNEL('TO.QM2.RETRY') +
   CHLTYPE(SDR) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.52) +
   CONNAME('qm2-ibm-mq.dev.svc.cluster.local(1414)') +
   TRPTYPE(TCP) +
   XMITQ('QM2.RETRY') +
   REPLACE
DEFINE CHANNEL('TO.QM2.STOPPED') +
   CHLTYPE(SDR) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.53) +
   CONNAME('qm2-ibm-mq.dev.svc.cluster.local(1414)') +
   TRPTYPE(TCP) +
   XMITQ('QM2.STOPPED') +
   REPLACE

DEFINE CHANNEL('QM1') +
   CHLTYPE(CLNTCONN) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.54) +
   CONNAME('qm1-ibm-mq.dev.svc.cluster.local(1414)') +
   DESCR('T2') +
   QMNAME('QM1') +
   TRPTYPE(TCP) +
   REPLACE

DEFINE AUTHINFO('PAM') +
   AUTHTYPE(IDPWOS) +
   ADOPTCTX(YES) +
   CHCKCLNT(OPTIONAL) +
   AUTHENMD(PAM) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.19.56) +
   REPLACE


**EFINE SERVICE('MQJSON') +
**   SERVTYPE(SERVER) +
**   STARTCMD('/usr/local/bin/mqgo/mq_json') +
**   STARTARG('-f /home/metaylor/lang/go/src/github.com/ibm-messaging/mq-golang/tools/cf.yaml') +
**   STOPCMD('/usr/bin/kill') +
**   STOPARG('+MQ_SERVER_PID+') +
**   STDOUT('/var/mqm/errors/mq_json.out') +
**   STDERR('/var/mqm/errors/mq_json.out') +
**   DESCR('MQ exporter for JSON format') +
*  ALTDATE(2022-03-14) +    
*  ALTTIME(09.10.11) +
**   REPLACE

**DEFINE SERVICE('MQPROMETHEUS') +
**   SERVTYPE(SERVER) +
**   STARTCMD('/usr/local/bin/mqgo/mq_prometheus') +
**   STARTARG('-f /home/metaylor/lang/go/src/github.com/ibm-messaging/mq-golang/tools/cf.yaml') +
**   STOPCMD('/usr/bin/kill') +
**   STOPARG('+MQ_SERVER_PID+') +
**   STDOUT('/var/mqm/errors/mq_prometheus.out') +
**   STDERR('/var/mqm/errors/mq_prometheus.out') +
**   DESCR('MQ exporter for Prometheus') +
*  ALTDATE(2022-02-28) +
*  ALTTIME(08.03.49) +
**   REPLACE



**SET CHLAUTH('*') +
**   TYPE(USERMAP) +
**   CLNTUSER('MARKTAYLOR') +
**   MCAUSER('metaylor') +
**   USERSRC(MAP) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.20.03) +
**   ACTION(REPLACE)
**SET CHLAUTH('*') +
**   TYPE(USERMAP) +
**   CLNTUSER('MARKTaylor') +
**   MCAUSER('metaylor') +
**   USERSRC(MAP) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.20.03) +
**   ACTION(REPLACE)
**SET CHLAUTH('*') +
**   TYPE(USERMAP) +
**   CLNTUSER('marktaylor') +
**   MCAUSER('metaylor') +
**   USERSRC(MAP) +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.20.03) +
**   ACTION(REPLACE)
**SET CHLAUTH('*') +
**   TYPE(BLOCKADDR) +
**   DESCR('MAD probe block') +
**   ADDRLIST('9.20.135.*' +
**           ,'9.20.225.*') +
*  ALTDATE(2022-02-22) +
*  ALTTIME(12.20.03) +
**   ACTION(REPLACE)

